use std::{
    io::ErrorKind,
    time::{Duration, Instant},
};

fn main() {
    let mut serial_port = serialport::new("/dev/ttyUSB0", 38400)
        .open()
        .expect("Failed to open serial port");
    serial_port
        .set_timeout(Duration::from_secs_f32(0.1))
        .expect("Failed to set timeout");
    let mut parser = nmea_parser::NmeaParser::new();
    let mut now = Instant::now();
    loop {
        let last = now;
        let mut buf = Vec::with_capacity(1024);
        if let Err(err) = serial_port.read_to_end(&mut buf) {
            if err.kind() != ErrorKind::TimedOut {
                eprintln!("Failed to read from serial port: {}", err);
                break;
            }
        }
        if buf.is_empty() {
            continue;
        }
        print!("Read: {} bytes\t", buf.len());
        now = Instant::now();
        println!("Time: {} s", (now - last).as_secs_f32());
        let (ubx, buf) = split_ubx(buf);
        for msg in ubx {
            println!(
                "Class: {:02X} ID: {:02X} Valid: {}",
                msg.class,
                msg.id,
                msg.validate()
            );
        }
        println!("Remaining: {}", buf.len());
        if let Ok(line) = std::str::from_utf8(&buf) {
            let lines = line.lines();
            for line in lines {
                if let Ok(msg) = parser.parse_sentence(line) {
                    println!("{:?}", msg);
                } else {
                    println!("Failed to parse: {}", line);
                }
            }
        }
        // println!("{:?}", buf);
    }
}

fn parse_messages(buf: &[u8]) {
    // 1. Split the buffer into messages
    // 1a. Find the binary message
}

struct UbxMessage {
    class: u8,
    id: u8,
    payload: Vec<u8>,
    crc_a: u8,
    crc_b: u8,
}

impl UbxMessage {
    fn validate(&self) -> bool {
        let mut ck_a: u8 = 0;
        let mut ck_b: u8 = 0;
        ck_a = ck_a.wrapping_add(self.class);
        ck_b = ck_b.wrapping_add(ck_a);
        ck_a = ck_a.wrapping_add(self.id);
        ck_b = ck_b.wrapping_add(ck_a);
        let length = self.payload.len() as u16;
        for byte in length.to_le_bytes().iter() {
            ck_a = ck_a.wrapping_add(*byte);
            ck_b = ck_b.wrapping_add(ck_a);
        }
        for byte in self.payload.iter() {
            ck_a = ck_a.wrapping_add(*byte);
            ck_b = ck_b.wrapping_add(ck_a);
        }
        ck_a == self.crc_a && ck_b == self.crc_b
    }
}

fn split_ubx(mut buf: Vec<u8>) -> (Vec<UbxMessage>, Vec<u8>) {
    let mut messages = Vec::new();
    loop {
        if let Ok((start, end, class, id)) = find_rxm_raw(&buf) {
            let mut payload: Vec<u8> = buf.drain(start..end).collect();
            let mut payload = payload.split_off(6);
            let crc_b = payload.pop().unwrap();
            let crc_a = payload.pop().unwrap();
            messages.push(UbxMessage {
                class,
                id,
                payload,
                crc_a,
                crc_b,
            });
        } else {
            break;
        }
    }
    (messages, buf)
}

fn find_rxm_raw(buf: &[u8]) -> Result<(usize, usize, u8, u8), &'static str> {
    let mut abs_start = 0;
    let abs_end;
    let buf = {
        let mut start = None;
        for i in 0..buf.len() {
            if buf[i] == 0xB5 {
                if let Some(idx) = buf.get(i + 1) {
                    if *idx == 0x62 {
                        abs_start = i;
                        start = Some(i + 2);
                    }
                } else {
                    break;
                }
            }
        }
        if let Some(start) = start {
            &buf[start..]
        } else {
            return Err("No UBX message found");
        }
    };
    if buf.len() < 4 {
        return Err("Insufficient data to get packet length");
    }
    let class = buf[0];
    let id = buf[1];
    let length = u16::from_le_bytes(
        buf[2..4]
            .try_into()
            .map_err(|_| "Failed to convert bytes to u16")?,
    );
    let end = length as usize + 4;
    abs_end = abs_start + 2 + end + 2;
    if end + 1 > buf.len() {
        return Err("Incomplete packet");
    }
    let (ck_a, ck_b) = rxm_checksum(&buf[..end]);
    if ck_a != buf[end] || ck_b != buf[end + 1] {
        return Err("Checksum mismatch");
    }
    Ok((abs_start, abs_end, class, id))
}

fn rxm_checksum(buf: &[u8]) -> (u8, u8) {
    let mut ck_a: u8 = 0;
    let mut ck_b: u8 = 0;
    for byte in buf {
        ck_a = ck_a.wrapping_add(*byte);
        ck_b = ck_b.wrapping_add(ck_a);
    }
    (ck_a, ck_b)
}

mod test {
    #[test]
    fn test_rxm_checksum() {
        let payload = [
            0xB5, 0x62, 0x02, 0x15, 0x70, 0x03, 0x17, 0xD9, 0xCE, 0xF7, 0x3F, 0xB4, 0x14, 0x41,
            0x1E, 0x09, 0x12, 0x1B, 0x01, 0x01, 0xE1, 0xD8, 0x60, 0xF4, 0x00, 0xDD, 0x8F, 0x1E,
            0x71, 0x41, 0xB8, 0xA3, 0x17, 0x26, 0xA2, 0x7D, 0x96, 0x41, 0x02, 0x47, 0xB5, 0x44,
            0x00, 0x10, 0x00, 0x00, 0xF4, 0xFB, 0x2A, 0x04, 0x02, 0x07, 0x0F, 0x00, 0x31, 0x15,
            0x50, 0x98, 0x60, 0x99, 0x81, 0x41, 0x4E, 0x66, 0xA1, 0xC6, 0xFA, 0x1E, 0xA7, 0x41,
            0xCF, 0x7C, 0x32, 0xC3, 0x01, 0x83, 0x00, 0x00, 0xF4, 0xFB, 0x29, 0x04, 0x02, 0x07,
            0x07, 0x00, 0x2D, 0x48, 0x60, 0x42, 0x01, 0xB6, 0x77, 0x41, 0x38, 0x33, 0xC9, 0x5B,
            0x04, 0xDE, 0x9E, 0x41, 0xDE, 0x33, 0x64, 0xC5, 0x03, 0x29, 0x00, 0x00, 0xF4, 0xFB,
            0x1E, 0x06, 0x06, 0x08, 0x07, 0x00, 0xE4, 0x9B, 0x46, 0x4C, 0x2F, 0x16, 0x73, 0x41,
            0x27, 0xD2, 0x2A, 0x5A, 0xE9, 0xD8, 0x98, 0x41, 0x64, 0xC0, 0x50, 0x44, 0x03, 0x25,
            0x00, 0x00, 0x00, 0x00, 0x12, 0x09, 0x0F, 0x0C, 0x01, 0x00, 0x39, 0xA1, 0x82, 0xCA,
            0x7B, 0x05, 0x77, 0x41, 0xC0, 0xC1, 0x86, 0x9D, 0x3A, 0xF8, 0x9D, 0x41, 0x29, 0x31,
            0x2C, 0x45, 0x03, 0x1C, 0x00, 0x00, 0xF4, 0xFB, 0x1E, 0x06, 0x07, 0x09, 0x07, 0x00,
            0xE8, 0xAD, 0x37, 0x53, 0xBF, 0x29, 0x74, 0x41, 0x12, 0x56, 0x6D, 0xEC, 0xA4, 0x3F,
            0x9A, 0x41, 0x73, 0x2B, 0x2E, 0xC5, 0x03, 0x20, 0x00, 0x00, 0xF4, 0xFB, 0x28, 0x04,
            0x02, 0x07, 0x0F, 0x00, 0xB2, 0x29, 0x59, 0x17, 0x31, 0x01, 0x73, 0x41, 0x61, 0x94,
            0x1B, 0x62, 0x64, 0x5A, 0x99, 0x41, 0x7D, 0x2F, 0x8D, 0xC5, 0x06, 0x02, 0x00, 0x03,
            0xF4, 0xFB, 0x23, 0x06, 0x04, 0x08, 0x0F, 0x00, 0x6F, 0x50, 0x69, 0x78, 0x5E, 0x5D,
            0x70, 0x41, 0x04, 0xDE, 0x49, 0xFC, 0x80, 0xE6, 0x95, 0x41, 0xDF, 0xC5, 0xBB, 0xC4,
            0x06, 0x03, 0x00, 0x0C, 0xF4, 0xFB, 0x27, 0x06, 0x02, 0x07, 0x07, 0x00, 0x8D, 0x99,
            0xB5, 0xDE, 0x15, 0x97, 0x74, 0x41, 0xA1, 0xE5, 0x06, 0x2A, 0xF1, 0x0C, 0x9B, 0x41,
            0xD7, 0x20, 0x78, 0x44, 0x02, 0x18, 0x00, 0x00, 0xF4, 0xFB, 0x27, 0x04, 0x02, 0x07,
            0x07, 0x00, 0x01, 0xAA, 0x0A, 0xBA, 0xD4, 0xEC, 0x75, 0x41, 0xF7, 0xA6, 0x15, 0x70,
            0xE7, 0xCD, 0x9C, 0x41, 0xFE, 0x5A, 0x26, 0xC5, 0x02, 0x06, 0x00, 0x00, 0xF4, 0xFB,
            0x1F, 0x06, 0x06, 0x08, 0x07, 0x00, 0xF7, 0x37, 0x37, 0xF7, 0x05, 0xD6, 0x71, 0x41,
            0x1E, 0xEE, 0x35, 0x9D, 0xE0, 0xC4, 0x97, 0x41, 0xFF, 0x0D, 0x02, 0x45, 0x06, 0x0E,
            0x00, 0x00, 0xF4, 0xFB, 0x26, 0x06, 0x03, 0x07, 0x07, 0x00, 0xF3, 0xDB, 0x58, 0xE2,
            0x8C, 0xF7, 0x70, 0x41, 0xF6, 0xB2, 0xA2, 0xB4, 0x60, 0x4A, 0x96, 0x41, 0x1A, 0x41,
            0x98, 0xC4, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x19, 0x09, 0x0F, 0x0A, 0x01, 0x00,
            0xE8, 0x35, 0x29, 0xF8, 0x67, 0xD8, 0x77, 0x41, 0x17, 0x56, 0xED, 0x56, 0xB8, 0x53,
            0x9F, 0x41, 0xE0, 0xE7, 0x1F, 0x45, 0x02, 0x19, 0x00, 0x00, 0xF4, 0xFB, 0x21, 0x06,
            0x05, 0x08, 0x07, 0x00, 0x26, 0x60, 0x54, 0x6E, 0xE2, 0x9A, 0x74, 0x41, 0x29, 0x8F,
            0x06, 0x9B, 0xEE, 0x11, 0x9B, 0x41, 0x9B, 0x56, 0x6A, 0x45, 0x00, 0x1B, 0x00, 0x00,
            0xF4, 0xFB, 0x27, 0x04, 0x02, 0x07, 0x07, 0x00, 0x7B, 0x46, 0xEC, 0x9E, 0x14, 0xB5,
            0x74, 0x41, 0x00, 0x80, 0xE6, 0x31, 0x57, 0x34, 0x9B, 0x41, 0xDC, 0x67, 0xDB, 0xC4,
            0x02, 0x09, 0x00, 0x00, 0xF4, 0xFB, 0x25, 0x04, 0x02, 0x07, 0x07, 0x00, 0xE0, 0x44,
            0x3D, 0x1B, 0xAD, 0x0D, 0x76, 0x41, 0x98, 0x37, 0x5B, 0x13, 0x0F, 0xF9, 0x9C, 0x41,
            0x58, 0xC5, 0x74, 0xC5, 0x00, 0x20, 0x00, 0x00, 0x54, 0xFB, 0x19, 0x08, 0x0A, 0x08,
            0x07, 0x00, 0x6D, 0xAB, 0xF6, 0x90, 0xF0, 0x95, 0x73, 0x41, 0x7D, 0x98, 0x0B, 0x65,
            0x1B, 0xBB, 0x99, 0x41, 0x8D, 0x99, 0x1E, 0xC5, 0x00, 0x03, 0x00, 0x00, 0xF4, 0xFB,
            0x24, 0x05, 0x03, 0x08, 0x07, 0x00, 0x42, 0x70, 0xDF, 0xDC, 0xD4, 0xEC, 0x75, 0x41,
            0x60, 0xAC, 0x94, 0x59, 0x22, 0x12, 0x96, 0x41, 0xCE, 0xFE, 0xFE, 0xC4, 0x02, 0x06,
            0x06, 0x00, 0xF4, 0xFB, 0x23, 0x05, 0x03, 0x08, 0x07, 0x00, 0x86, 0x12, 0x04, 0xF4,
            0x15, 0x97, 0x74, 0x41, 0x76, 0x7E, 0x4F, 0x59, 0x20, 0xBA, 0x94, 0x41, 0xB0, 0x19,
            0x3E, 0x44, 0x02, 0x18, 0x06, 0x00, 0xF4, 0xFB, 0x26, 0x04, 0x03, 0x07, 0x07, 0x00,
            0x40, 0x9E, 0x2B, 0xE3, 0x4F, 0x0E, 0x78, 0x41, 0xC8, 0xB1, 0xAB, 0xE3, 0x3C, 0x37,
            0x98, 0x41, 0xAE, 0x3A, 0x15, 0xC5, 0x02, 0x04, 0x06, 0x00, 0xF4, 0xFB, 0x22, 0x05,
            0x04, 0x08, 0x07, 0x00, 0x7F, 0x4F, 0xDB, 0xB5, 0x14, 0xB5, 0x74, 0x41, 0xE8, 0xD1,
            0xF4, 0x58, 0x50, 0xD8, 0x94, 0x41, 0xCC, 0x27, 0xA8, 0xC4, 0x02, 0x09, 0x06, 0x00,
            0xF4, 0xFB, 0x22, 0x05, 0x03, 0x08, 0x07, 0x00, 0x53, 0xB2, 0x2B, 0xF0, 0x68, 0xD8,
            0x77, 0x41, 0x7B, 0xF7, 0x23, 0x07, 0xFD, 0x00, 0x98, 0x41, 0x36, 0x13, 0xF5, 0x44,
            0x02, 0x19, 0x06, 0x00, 0xF4, 0xFB, 0x22, 0x05, 0x03, 0x07, 0x07, 0x00, 0xFB, 0x1C,
            0x99, 0x6E, 0xF0, 0x95, 0x73, 0x41, 0xE6, 0xEE, 0x30, 0x86, 0xCF, 0x0C, 0x94, 0x41,
            0x48, 0x20, 0xF7, 0xC4, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x1A, 0x08, 0x0F, 0x09,
            0x01, 0x00, 0x66, 0x53, 0x5C, 0x67, 0x31, 0x01, 0x73, 0x41, 0xDF, 0x4C, 0xFD, 0x6C,
            0x16, 0xB8, 0x93, 0x41, 0x05, 0xA0, 0x5B, 0xC5, 0x06, 0x02, 0x02, 0x03, 0xF4, 0xFB,
            0x25, 0x06, 0x03, 0x07, 0x0F, 0x00, 0x18, 0xF8, 0xB1, 0xDA, 0xE2, 0x9A, 0x74, 0x41,
            0xB8, 0x2B, 0xFA, 0xB6, 0xF3, 0x17, 0x95, 0x41, 0x32, 0x94, 0x36, 0x45, 0x00, 0x1B,
            0x03, 0x00, 0xF4, 0xFB, 0x22, 0x07, 0x04, 0x08, 0x07, 0x00, 0x23, 0xBC, 0xD2, 0x64,
            0x5E, 0x5D, 0x70, 0x41, 0xCA, 0x24, 0x51, 0x0E, 0x9D, 0x08, 0x91, 0x41, 0xB3, 0x06,
            0x92, 0xC4, 0x06, 0x03, 0x02, 0x0C, 0xF4, 0xFB, 0x1F, 0x07, 0x06, 0x09, 0x07, 0x00,
            0xD8, 0xAE, 0x6E, 0x85, 0x06, 0xD6, 0x71, 0x41, 0x61, 0x06, 0x48, 0x66, 0xAD, 0x7C,
            0x92, 0x41, 0xC4, 0x56, 0xCA, 0x44, 0x06, 0x0E, 0x02, 0x00, 0xD0, 0x98, 0x1B, 0x08,
            0x08, 0x08, 0x07, 0x00, 0x21, 0xF2,
        ];
        let payload2 = [
            0xB5, 0x62, 0x02, 0x15, 0xB0, 0x03, 0x17, 0xD9, 0xCE, 0xF7, 0x67, 0xA1, 0x14, 0x41,
            0x1E, 0x09, 0x12, 0x1D, 0x01, 0x01, 0xF1, 0x71, 0x29, 0x58, 0x20, 0x10, 0x2E, 0x83,
            0x71, 0x41, 0x3D, 0xFB, 0xB6, 0x02, 0xD2, 0x01, 0x97, 0x41, 0x5C, 0x14, 0x05, 0x45,
            0x00, 0x10, 0x00, 0x00, 0xF4, 0xFB, 0x2F, 0x03, 0x01, 0x06, 0x0F, 0x00, 0xB4, 0x3E,
            0x51, 0x35, 0x4C, 0x94, 0x81, 0x41, 0xC1, 0xA7, 0x4A, 0x5A, 0x4E, 0x18, 0xA7, 0x41,
            0xAF, 0x62, 0x3A, 0xC3, 0x01, 0x83, 0x00, 0x00, 0xF4, 0xFB, 0x29, 0x04, 0x02, 0x06,
            0x07, 0x00, 0x16, 0x84, 0x7D, 0xCB, 0xA1, 0xE5, 0x76, 0x41, 0xB5, 0xE7, 0x68, 0xAA,
            0xC1, 0xCE, 0x9D, 0x41, 0xBE, 0x76, 0x67, 0xC5, 0x03, 0x29, 0x00, 0x00, 0xF4, 0xFB,
            0x23, 0x05, 0x04, 0x08, 0x07, 0x00, 0x70, 0xB4, 0x66, 0x06, 0x94, 0x4E, 0x73, 0x41,
            0x96, 0x98, 0x39, 0x69, 0x54, 0x22, 0x99, 0x41, 0x82, 0x79, 0x90, 0x44, 0x03, 0x25,
            0x00, 0x00, 0xF4, 0xFB, 0x23, 0x05, 0x04, 0x08, 0x0F, 0x00, 0x13, 0x1B, 0xA8, 0xFA,
            0xF9, 0x2A, 0x74, 0x41, 0x6E, 0x8E, 0x54, 0x4B, 0x3E, 0x41, 0x9A, 0x41, 0x82, 0x0C,
            0x83, 0x44, 0x03, 0x14, 0x00, 0x00, 0x00, 0x00, 0x15, 0x09, 0x0F, 0x0C, 0x01, 0x00,
            0x1F, 0x7D, 0xAE, 0x57, 0x93, 0x08, 0x73, 0x41, 0x37, 0x49, 0x5E, 0xE1, 0x31, 0xC7,
            0x98, 0x41, 0xAC, 0xCC, 0xB7, 0xC4, 0x03, 0x17, 0x00, 0x00, 0x00, 0x00, 0x14, 0x09,
            0x0F, 0x0C, 0x01, 0x00, 0xD2, 0x3E, 0xF4, 0x0A, 0x72, 0x99, 0x73, 0x41, 0x37, 0x38,
            0x28, 0x63, 0xCA, 0x83, 0x99, 0x41, 0x8C, 0xE5, 0x0F, 0xC5, 0x03, 0x20, 0x00, 0x00,
            0xF4, 0xFB, 0x2A, 0x03, 0x02, 0x06, 0x0F, 0x00, 0x51, 0x49, 0xA2, 0x95, 0x2F, 0x13,
            0x72, 0x41, 0xD5, 0xE4, 0x5C, 0x13, 0xE2, 0x1C, 0x98, 0x41, 0x5D, 0xE4, 0x7E, 0xC5,
            0x06, 0x02, 0x00, 0x03, 0xF4, 0xFB, 0x27, 0x05, 0x02, 0x07, 0x0F, 0x00, 0x76, 0x93,
            0xB7, 0xC0, 0x60, 0x28, 0x70, 0x41, 0xB1, 0xC4, 0xC5, 0x32, 0x96, 0x9F, 0x95, 0x41,
            0x10, 0xAE, 0xD3, 0xC3, 0x06, 0x03, 0x00, 0x0C, 0xF4, 0xFB, 0x22, 0x06, 0x04, 0x08,
            0x07, 0x00, 0xA8, 0xB4, 0xB2, 0xDE, 0x9A, 0x63, 0x77, 0x41, 0x9A, 0x37, 0x7A, 0xD9,
            0x44, 0xBA, 0x9E, 0x41, 0x22, 0xA9, 0x39, 0xC5, 0x02, 0x04, 0x00, 0x00, 0xA4, 0xA1,
            0x1A, 0x08, 0x0A, 0x08, 0x07, 0x00, 0x01, 0x3C, 0x2B, 0xB7, 0x27, 0xDA, 0x74, 0x41,
            0x2B, 0x3F, 0x78, 0xED, 0x0D, 0x65, 0x9B, 0x41, 0x48, 0xC7, 0xAE, 0x44, 0x02, 0x18,
            0x00, 0x00, 0xF4, 0xFB, 0x2B, 0x04, 0x01, 0x05, 0x07, 0x00, 0x1B, 0x15, 0x3F, 0x96,
            0x26, 0x60, 0x75, 0x41, 0x67, 0xC6, 0x44, 0xBD, 0x15, 0x15, 0x9C, 0x41, 0x66, 0x32,
            0x13, 0xC5, 0x02, 0x06, 0x00, 0x00, 0xF4, 0xFB, 0x23, 0x05, 0x03, 0x07, 0x07, 0x00,
            0x87, 0x24, 0x35, 0x7C, 0x07, 0x55, 0x72, 0x41, 0xEC, 0x80, 0x8E, 0xE9, 0x20, 0x6E,
            0x98, 0x41, 0xE3, 0x08, 0x1D, 0x45, 0x06, 0x0E, 0x00, 0x00, 0xF4, 0xFB, 0x25, 0x06,
            0x03, 0x07, 0x07, 0x00, 0x81, 0x1B, 0x1A, 0xF6, 0xAA, 0x6B, 0x78, 0x41, 0x94, 0xBB,
            0x1D, 0x65, 0x97, 0x0A, 0xA0, 0x41, 0xB9, 0x00, 0x28, 0x45, 0x02, 0x19, 0x00, 0x00,
            0xF4, 0xFB, 0x22, 0x06, 0x04, 0x08, 0x07, 0x00, 0x4E, 0x9E, 0xE2, 0xA8, 0x2C, 0x6D,
            0x75, 0x41, 0x99, 0xBF, 0x0C, 0x93, 0x32, 0x26, 0x9C, 0x41, 0x04, 0x01, 0x69, 0x45,
            0x00, 0x1B, 0x00, 0x00, 0xF4, 0xFB, 0x23, 0x05, 0x04, 0x08, 0x07, 0x00, 0xB3, 0x86,
            0x5B, 0x17, 0xE7, 0x5E, 0x74, 0x41, 0xA5, 0xE8, 0x0D, 0xA5, 0x1F, 0xC3, 0x9A, 0x41,
            0xD2, 0x1B, 0xA5, 0xC4, 0x02, 0x09, 0x00, 0x00, 0xF4, 0xFB, 0x21, 0x06, 0x05, 0x08,
            0x07, 0x00, 0x66, 0x2F, 0xC6, 0xDD, 0x15, 0x35, 0x75, 0x41, 0xDA, 0xC2, 0xED, 0x53,
            0x82, 0xDC, 0x9B, 0x41, 0xF0, 0x61, 0x6D, 0xC5, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
            0x19, 0x09, 0x0F, 0x0A, 0x01, 0x00, 0xB0, 0xDB, 0xFF, 0x79, 0xAA, 0x17, 0x73, 0x41,
            0x9A, 0x7F, 0x7F, 0xBD, 0x36, 0x15, 0x99, 0x41, 0x74, 0x68, 0xF3, 0xC4, 0x00, 0x03,
            0x00, 0x00, 0xF4, 0xFB, 0x26, 0x05, 0x02, 0x07, 0x07, 0x00, 0x9E, 0xA0, 0x6C, 0xA4,
            0x26, 0x60, 0x75, 0x41, 0xE0, 0x79, 0xC0, 0x0C, 0x85, 0x84, 0x95, 0x41, 0x1C, 0x8E,
            0xE1, 0xC4, 0x02, 0x06, 0x06, 0x00, 0xF4, 0xFB, 0x1E, 0x06, 0x06, 0x08, 0x07, 0x00,
            0xB7, 0xDD, 0xF1, 0xBA, 0x27, 0xDA, 0x74, 0x41, 0x09, 0xB0, 0xAA, 0x0E, 0xA4, 0xFD,
            0x94, 0x41, 0xD4, 0xED, 0x85, 0x44, 0x02, 0x18, 0x06, 0x00, 0xF4, 0xFB, 0x26, 0x04,
            0x03, 0x07, 0x07, 0x00, 0x10, 0xDB, 0x04, 0xCE, 0x9B, 0x63, 0x77, 0x41, 0x2E, 0x35,
            0xA4, 0xF1, 0x66, 0x8B, 0x97, 0x41, 0x94, 0x3E, 0x0E, 0xC5, 0x02, 0x04, 0x06, 0x00,
            0xF4, 0xFB, 0x20, 0x05, 0x06, 0x08, 0x07, 0x00, 0x0A, 0xBF, 0x89, 0x2E, 0xE7, 0x5E,
            0x74, 0x41, 0x85, 0x3C, 0x18, 0x31, 0x90, 0x81, 0x94, 0x41, 0x08, 0x1F, 0x7D, 0xC4,
            0x02, 0x09, 0x06, 0x00, 0xF4, 0xFB, 0x1F, 0x06, 0x07, 0x08, 0x07, 0x00, 0x4D, 0x49,
            0x22, 0x71, 0xA4, 0xE5, 0x76, 0x41, 0x7E, 0xFC, 0x76, 0xE4, 0x99, 0x0C, 0x97, 0x41,
            0xA0, 0x49, 0x3B, 0xC5, 0x03, 0x29, 0x02, 0x00, 0x00, 0x00, 0x0B, 0x0A, 0x0F, 0x0C,
            0x01, 0x00, 0xDB, 0x96, 0x68, 0xEC, 0xAB, 0x6B, 0x78, 0x41, 0x7E, 0x92, 0x01, 0xAA,
            0x39, 0x95, 0x98, 0x41, 0x1C, 0xBB, 0x00, 0x45, 0x02, 0x19, 0x06, 0x00, 0xF4, 0xFB,
            0x21, 0x05, 0x04, 0x08, 0x07, 0x00, 0xCB, 0xF3, 0x2A, 0x33, 0xAA, 0x17, 0x73, 0x41,
            0x54, 0xC2, 0x78, 0x51, 0x8B, 0x8B, 0x93, 0x41, 0xD6, 0xA2, 0xBD, 0xC4, 0x00, 0x03,
            0x03, 0x00, 0xF4, 0xFB, 0x1A, 0x08, 0x09, 0x08, 0x07, 0x00, 0x42, 0x3F, 0xAD, 0x2E,
            0x17, 0x35, 0x75, 0x41, 0x34, 0xF4, 0x01, 0xF5, 0xCD, 0xB5, 0x95, 0x41, 0xBF, 0x28,
            0x39, 0xC5, 0x00, 0x20, 0x03, 0x00, 0x00, 0x00, 0x16, 0x09, 0x0F, 0x0C, 0x01, 0x00,
            0xCE, 0x16, 0x70, 0xBF, 0x2F, 0x13, 0x72, 0x41, 0x6B, 0xBF, 0x13, 0xCF, 0x21, 0xC1,
            0x92, 0x41, 0xF3, 0x3B, 0x46, 0xC5, 0x06, 0x02, 0x02, 0x03, 0xF4, 0xFB, 0x24, 0x06,
            0x03, 0x07, 0x0F, 0x00, 0xD1, 0xAD, 0xDA, 0x32, 0x2D, 0x6D, 0x75, 0x41, 0xE3, 0x11,
            0x50, 0x0E, 0x39, 0xEF, 0x95, 0x41, 0xD3, 0x91, 0x35, 0x45, 0x00, 0x1B, 0x03, 0x00,
            0xF4, 0xFB, 0x21, 0x06, 0x04, 0x08, 0x07, 0x00, 0x0E, 0x4F, 0x90, 0xF9, 0x07, 0x55,
            0x72, 0x41, 0x00, 0x6F, 0x46, 0x58, 0x51, 0x00, 0x93, 0x41, 0x2A, 0x32, 0xF4, 0x44,
            0x06, 0x0E, 0x02, 0x00, 0x5C, 0x9E, 0x20, 0x07, 0x05, 0x08, 0x07, 0x00, 0xC7, 0x82,
        ];
        match super::find_rxm_raw(&payload) {
            Ok(msg) => {
                println!("Message: {:?}", msg);
            }
            Err(err) => {
                eprintln!("Error: {}", err);
            }
        }
        match super::find_rxm_raw(&payload2) {
            Ok(msg) => {
                println!("Message: {:?}", msg);
            }
            Err(err) => {
                eprintln!("Error: {}", err);
            }
        }
    }
}
